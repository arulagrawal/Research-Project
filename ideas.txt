1.

`spin -A` recommends predicate abstraction. I guess the variables I am using as const can be turned into 
boolean predicates, maybe this is faster? In any case it is more inline with the mathematical representation.

2.
Rewrite the overall control flow to only have 3 running procs. In theory the program can terminate after each robot
scores just once, and we can tighten the constraints by counting the timesteps since the beginning. (if we end at 1 point
we need a different way to optimise)

Get the python program to read the output of spin, and then modify the scenarios to include a score target.
Then the score target can be iteratively increased to find the maximum score.
We can optimise for combined score or individual scores.

For nash equilibria we can output the strategy for a robot, and only vary the strategy for one robot at a time.

3. 
Explore more compile/run options (ask around in SPIN forum?)


Extra/Might be helpful:

Use python script to create a visualization of the paths (strategies) created.